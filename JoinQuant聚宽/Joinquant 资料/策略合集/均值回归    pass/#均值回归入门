# 均值回归入门（Mean Reversion）
# 2006-01-01 到 2016-05-31, ￥100000, 每天

import time
import datetime

'''
================================================================================
总体回测前
================================================================================
'''

#总体回测前要做的事情
def initialize(context):
    set_params()        #1设置策参数
    set_variables()     #2设置中间变量
    set_backtest()      #3设置回测条件

#1
#设置策略参数
def set_params():
    g.N = 30   # 设置移动均线天数
    g.tc = 30  # 设置调仓天数
    g.num_stocks = 10  # 设置每次调仓选取的股票数量

#2
#设置中间变量
def set_variables():
    g.t = 0 #记录回测运行的天数
    g.if_trade = False #当天是否交易

#3
#设置回测条件
def set_backtest():
    set_benchmark('000300.XSHG')
    set_option('use_real_price',True) # 用真实价格交易
    log.set_level('order','error')    # 设置报错等级




'''
================================================================================
每天开盘前
================================================================================
'''

#每天开盘前要做的事情
def before_trading_start(context):
    if g.t%g.tc==0:
        #每g.tc天，交易一次行
        g.if_trade=True 
        # 设置手续费与手续费
        set_slip_fee(context) 
        # 设置可行股票池：获得当前开盘的沪深300股票池并剔除当前或者计算样本期间停牌的股票
        g.feasible_stocks = set_feasible_stocks(get_index_stocks('000300.XSHG'),g.N,context)
    g.t+=1

#4
# 设置可行股票池：
# 过滤掉当日停牌的股票,且筛选出前days天未停牌股票
# 输入：stock_list为list类型,样本天数days为int类型，context（见API）
# 输出：list
def set_feasible_stocks(stock_list,days,context):
    # 得到是否停牌信息的dataframe，停牌的1，未停牌得0
    suspened_info_df = get_price(list(stock_list), start_date=context.current_dt, end_date=context.current_dt, frequency='daily', fields='paused')['paused'].T
    # 过滤停牌股票 返回dataframe
    unsuspened_index = suspened_info_df.iloc[:,0]<1
    # 得到当日未停牌股票的代码list:
    unsuspened_stocks = suspened_info_df[unsuspened_index].index
    # 进一步，筛选出前days天未曾停牌的股票list:
    feasible_stocks=[]
    current_data=get_current_data()
    for stock in unsuspened_stocks:
        if sum(attribute_history(stock, days, unit='1d',fields=('paused'),skip_paused=False))[0]==0:
            feasible_stocks.append(stock)
    return feasible_stocks
    
#5
# 根据不同的时间段设置滑点与手续费
def set_slip_fee(context):
    # 将滑点设置为0
    set_slippage(FixedSlippage(0)) 
    # 根据不同的时间段设置手续费
    dt=context.current_dt
    log.info(type(context.current_dt))
    
    if dt>datetime.datetime(2013,1, 1):
        set_commission(PerTrade(buy_cost=0.0003, sell_cost=0.0013, min_cost=5)) 
        
    elif dt>datetime.datetime(2011,1, 1):
        set_commission(PerTrade(buy_cost=0.001, sell_cost=0.002, min_cost=5))
            
    elif dt>datetime.datetime(2009,1, 1):
        set_commission(PerTrade(buy_cost=0.002, sell_cost=0.003, min_cost=5))
                
    else:
        set_commission(PerTrade(buy_cost=0.003, sell_cost=0.004, min_cost=5))
        
        
        
        
'''
================================================================================
每天交易时
================================================================================
'''

def handle_data(context,data):
    if g.if_trade == True:
        # 依本策略的买入信号，得到应该买的股票列表
        MR_should_buy = buy_signal(context, data)
        
        # 查看持仓情况
        if len(context.portfolio.positions)>0:
            holding = context.portfolio.positions
        else:
            holding = []

        # 计算每支股票分到多少钱
        cash_per_stock = context.portfolio.portfolio_value / g.num_stocks
        # 对于不需要持仓的股票，全仓卖出
        for stock in holding:
            if stock not in MR_should_buy:
                order_target_value(stock,0)
        # 对于需要持仓的股票，按分配到的份额买入
        log.info(MR_should_buy)
        for stock in MR_should_buy:
            order_target_value(stock,cash_per_stock)
            
    g.if_trade = False



#6
# 依本策略的买入信号，得到应该买的股票列表
# 输入：context, data（见API），输出：应该买的股票列表，list类型
def buy_signal(context, data):
    # 获差率列表
    difference_ratio_table = compute_difference_ratio(context, data, g.feasible_stocks) 
    # 按差率从大到小排列
    sorted_table = difference_ratio_table.sort(columns = 'difference_ratio', ascending = False)
    # 返回排列好的股票list（将sorted_table第一列转换成列表）
    sorted_list = sorted_table.iloc[:,1].tolist()
    # 截取最高的g.num_stocks个
    should_buy = sorted_list[0:g.num_stocks]
    return should_buy



#7
# 计算差率列表
# 输入：context, data（见API）,stocks为list类型
# 输出：DataFrame: 列 stock 为股票名，列 difference_ratio 为差率
def compute_difference_ratio(context, data, stocks):
    # 创建差率字典
    difference_ratio_table = []
    for stock in stocks:
        # 获取数据
        h = attribute_history(stock, g.N, '1d', ['close'])
        # 均线
        ma = sum(h['close']) / g.N
        # 获取现价
        current_price = data[stock].price
        # 计算差率
        difference_ratio = (ma - current_price) / ma 
        difference_ratio_table.append({'stock': stock, 'difference_ratio' : difference_ratio})
    return(pd.DataFrame(difference_ratio_table))




'''
================================================================================
每天收盘后
================================================================================
'''

# 每日收盘后要做的事情（本策略中不需要）
def after_trading_end(context):
    return