
# 标题：【量化课堂】均值回归进阶策略
# 作者：JoinQuant量化课堂

import numpy as np
import pandas as pd


'''
================================================================================
总体回测前
================================================================================
'''
def initialize(context):
    # 设置参数
    set_params()
    # 设置全局变量
    set_variables()
    # 设置回测
    set_backtest()
    # 初始化输赢统计
    initiate_statistics(context)

# ---代码块1.设置参数
def set_params():
    # 设置股票池，少量个股效果比较好
    g.security = ['002013.XSHE','002230.XSHE']
    # 设置移动均线天数
    g.ma_length = 30
    # 设置判断输赢的天数
    g.after_days = 30
    # 赢是几个sigma
    g.win_times_sigma = 1
    # 输是几个sigma
    g.lose_times_sigma = 1
    # 最小数据比例
    g.least_percentage = 0.05
    # 计量输赢时取区间宽度
    g.band_width = 4
    # 交易时止盈线
    g.profit_times_sigma = 1
    # 交易时止损线
    g.loss_times_sigma = 1

# ---代码块2.设置全局变量
def set_variables():
    # 是不是第一次跑？
    g.first_run = True
    # 股票的卖出判定
    g.sell_conditions = {}  
    # 记录输赢统计
    g.stock_stats = {}
    # 记录最佳买入区间
    g.stock_best_ranges = {}

# ---代码块3.设置回测
def set_backtest():
    # 设置回测基准
    set_benchmark('000300.XSHG')
    # 使用真实价格
    set_option('use_real_price', True)
    # 设置报错
    log.set_level('order', 'error')

# --代码块4
# 初始化输赢统计
# 无输出
# 更新全局变量一dict的DataFrame，key为股票，内容为偏差倍数和输赢的统计
def initiate_statistics(context):
    # 如果是第一次跑
    if g.first_run:
        # 初始化输赢统计
        stock_stats = {}
        for security in g.security:
            # 上个日期
            previous_date = context.previous_date
            # 获取历史收盘价数据
            prices = get_price(security, start_date='2006-01-01', end_date=previous_date, frequency='daily', fields=['close'], skip_paused = True)['close']
            # 得到偏离倍数和输赢结果的记录
            my_data = collect_data(prices, g.ma_length)
            # 对上面取得的数据进行数量统计
            statistics = compute_statistics(my_data)
            # 将统计结果做成DF
            my_df = pd.DataFrame(statistics, index=['value', 'win', 'even', 'lose'])
            # 转置
            stock_stats[security] = my_df.T
        # 更新到全局变量
        g.stock_stats = stock_stats
        # 不再是第一次跑了
        g.first_run = False

# ---代码块5. 
# 收集输赢数据
# 输入一list价格和位置i
# 返回一list的pairs，是i天之后每一天的价格偏离倍数和之后的输赢结果。
def collect_data(prices, i):
    # 初始化记录
    my_data = []
    # 当i的位加后置天数没有超过数据长度
    while i + g.after_days < len(prices):
        # 取过去ma长度天数的数据
        range_data = prices[i-g.ma_length: i]
        # 算均线
        ma = mean(range_data)
        # 算标准差
        sigma = std(range_data)
        # 算偏差倍数*10，乘十是因为整数更方便操作
        difference_times_sigma =int(( ((prices[i] - ma) / sigma) // 0.1) )
        # 如果-10< 偏离倍数 <= -1，因为小于-10的也太异常了，因此也不要
        if -100< difference_times_sigma <= -10:
            # 计算输赢结果
            result = win_or_lose(prices.iloc[i], prices[i+1: i+g.after_days+1], sigma)  
            # 将偏离倍数和输赢结果记录下来
            my_data.append((difference_times_sigma, result))
        # i++
        i += 1
    return(my_data)

# ---代码块6. 
# 进行数量统计
# 输入一list的pairs，每一个pair是偏离倍数和输赢结果
# 返回一dict,key是偏离倍数，内容是‘输’‘赢’‘平’分别出现多少次
def compute_statistics(my_data):
    # 创建字典进行统计
    statistics = {}
    # 数据还没空的时候
    for pair in my_data:
        # 输赢是怎么样的呀
        result = pair[1]
        # 偏离倍数呢
        value = pair[0]
        # 如果这个偏离倍数还没出现过
        if value not in statistics:
            # 那就记下来！
            statistics[value] = {'lose': 0, 'even': 0, 'win':0}
        # 输赢结果的统计加一
        statistics[value][result] += 1
    return(statistics)

# --代码块7.判断输赢
# 输入价格、一Series的价格和sigma，返回是赢还是输还是平
def win_or_lose(price, my_list, sigma):
    # 设上限
    upper_bound = price + g.win_times_sigma * sigma
    # 设下限
    lower_bound = price - g.lose_times_sigma * sigma
    # 未来几天里
    for future_price in my_list:
        # 碰到上线了
        if future_price >= upper_bound:
            # 赢
            return('win')
        # 碰到下线了
        if future_price <= lower_bound:
            # 输
            return('lose')
    # 要不就是平
    return('even')


'''
================================================================================
每天开盘前
================================================================================
'''
def before_trading_start(context):
    # 设置手续费和滑点
    set_slip_fee(context)

# ---代码块8
# 根据不同的时间段设置滑点与手续费
def set_slip_fee(context):
    # 将滑点设置为0,滑点最后下单点位和实际点位有差距
    set_slippage(FixedSlippage(0)) 
    # 根据不同的时间段设置手续费
    dt=context.current_dt
    
    if dt>datetime.datetime(2013,1, 1):
        set_commission(PerTrade(buy_cost=0.0003, sell_cost=0.0013, min_cost=5)) 
        
    elif dt>datetime.datetime(2011,1, 1):
        set_commission(PerTrade(buy_cost=0.001, sell_cost=0.002, min_cost=5))
            
    elif dt>datetime.datetime(2009,1, 1):
        set_commission(PerTrade(buy_cost=0.002, sell_cost=0.003, min_cost=5))
                
    else:
        set_commission(PerTrade(buy_cost=0.003, sell_cost=0.004, min_cost=5))


'''
================================================================================
每天交易时
================================================================================
'''
def handle_data(context, data):
    # 更新输赢统计
    update_statistics(context)
    # 判断最好的买入区间
    best_ranges = get_best_ranges()
    # 产生买入信号
    to_buy = buy_signals(best_ranges, context)
    # 产生卖出信号
    to_sell = sell_signals(context)
    # 卖出股票
    sell_stocks(to_sell, to_buy, context)
    # 买入股票
    buy_stocks(to_buy, context)

# ---代码块9.
# 更新输赢统计
# 无输出
# 更新全局变量的偏离倍数和输赢统计DF
def update_statistics(context):
    for security in g.security:
        # 取价格
        prices = attribute_history(security, 1+g.ma_length+g.after_days, '1d', 'close', skip_paused = True)['close'] 
        # 上一交易日是否停牌
        paused = attribute_history(security, 1, '1d', 'paused')['paused'].iloc[0]
        # 上个交易日没停牌的话就更新
        if paused == 0:
            # 算sigma的日子
            past_prices = prices[0:g.ma_length]
            # 对应的当天
            current_price = prices[g.ma_length]
            # 算输赢的日子
            future_prices = prices[g.ma_length + 1: ]
            # 算ma
            ma = mean(past_prices)
            # 算sigma
            sigma = std(past_prices)
            # 计算和ma差几个sigma 
            difference_times_sigma = int((current_price - ma)/sigma // 0.1)
            # 上线
            upper_bound = current_price + g.win_times_sigma * sigma
            # 下限
            lower_bound = current_price - g.lose_times_sigma * sigma
            # 判断过后几天的输赢
            result = win_or_lose(current_price, future_prices, sigma)
            # 把DF转成dict进行操作
            my_dict = g.stock_stats[security].T.to_dict()
            # 在合理区间里的话
            if -100 < difference_times_sigma <= -10:
                # 如果dict里有这个倍数了
                if difference_times_sigma in my_dict:
                    # 直接更新输赢
                    my_dict[difference_times_sigma][result] += 1 
                # 如果没有
                else:
                    # 加进去
                    my_dict[difference_times_sigma] = {'value': difference_times_sigma, 'win' : 0, 'even' : 0, 'lose' : 0}
                    # 更新输赢
                    my_dict[difference_times_sigma][result] = 1
            # 更新全局变量
            g.stock_stats[security] = pd.DataFrame(my_dict, index=['win', 'even', 'lose']).T


# --代码块10.
# 判断最佳区间
# 无输出
# 返回一dict,key为股票，值为最佳买入区域DF
def get_best_ranges():
    stock_best_ranges = {}
    for security in g.stock_stats:
        statistics = g.stock_stats[security]
        # 获取偏离倍数
        values = statistics.index
        # 输数
        loses = statistics['lose']
        # 赢数
        wins = statistics['win']
        # 平数
        evens = statistics['even']
        # 总数
        num_data = sum(wins) + sum(loses) + sum(evens)
        mydata = []
        # 在所有位置不会溢出的位置
        for n in range(min(values), max(values) - (g.band_width-1)):
            # 取在n和（n+宽度）之间的DF行
            stat_in_range = statistics[(values >= n) & (values <= n+g.band_width-1)]
            # 赢除输（这里输+1，因为可能输=0）
            ratio = float(sum(stat_in_range['win'])) / float((sum(stat_in_range['lose']) + 1))
            # 这区间数据总量
            range_data = float(sum(stat_in_range['win']) + sum(stat_in_range['lose']) + sum(stat_in_range['even']))
            # 如果数据量超过预设的临界值
            if range_data / num_data >= g.least_percentage:
                # 记录区间的输赢比
                mydata.append({'low': n, 'high': n+g.band_width, 'ratio': ratio})
        # 区间统计转换成DF
        data_table = pd.DataFrame(mydata)
        # 按输赢比排序
        sorted_table = data_table.sort('ratio', ascending = False)
        # 取第一行
        stock_best_range = sorted_table.iloc[0]
        stock_best_ranges[security] = stock_best_range
    # 输出结果
    return(stock_best_ranges)

# --代码块11.
# 获取买入信号
# 输出一list该买入的股票
def buy_signals(stock_best_ranges, context):
    to_buy = [] 
    for security in g.security:
        stock_best_range = stock_best_ranges[security]
        # 看现价
        current_price = attribute_history(security,1, '1d', 'close').iloc[0,0]
        # 取倍数区间低点
        low = float(stock_best_range['low'])
        # 取倍数区间高点
        high = float(stock_best_range['high'])
        # 取赢率
        ratio = float(stock_best_range['ratio'])
        # 获取历史收盘价
        h = attribute_history(security, g.ma_length, '1d', ['close'], skip_paused=True)['close']
        # 计算均线
        ma = mean(h)
        # 计算标准差
        sigma  = std(h)
        # 算现价的偏离倍数
        times_sigma = (current_price - ma) / sigma
        # 如果在该买的区间里
        if low <= 10 * times_sigma and 10 *times_sigma <= high:
            # 加入买入列表
            to_buy.append(security)
    return(to_buy)

# --代码块12.
# 获取卖出信号
# 输出一list该卖出的股票
def sell_signals(context): 
    to_sell = []
    # 对于仓内所有股票
    for security in context.portfolio.positions:
        # 取现价
        current_price = history(1, '1m', 'close', security).iloc[0,0]
        # 查卖出条件
        conditions = g.sell_conditions[security]
        # 看看是不是该卖了
        if current_price >= conditions['high'] or current_price <= conditions['low'] or conditions['days'] <= 0:
            # 加入卖出信号，确保没有重复
            to_sell.append(security)
        # 如果不需要卖
        else:
            # 日数减1
            g.sell_conditions[security]['days'] -= 1
    return(to_sell)

# ---代码块13.
# 卖出函数
def sell_stocks(to_sell, to_buy, context):
    for security in to_sell:
        # 如果也在买入名单里
        if security in to_buy:
            # 从卖出信号中删掉
            pass
        # 不该买的话
        else:
            # 全卖掉
            order_target(security, 0)
            # 如果没有卖干净呢
            if security in context.portfolio.positions:
                # 把天数清零
                g.sell_conditions[security]['days'] = 0

# ---代码块14.
# 买入函数
def buy_stocks(to_buy, context):
    # 有多少钱
    cash_per_stock = context.portfolio.portfolio_value
    if len(context.portfolio.positions) == 0:
        # 对于所有买单里的股票
        for security in to_buy:
            order_value(security, cash_per_stock)
            if security in context.portfolio.positions:
                # 看现价
                current_price = attribute_history(security,1, '1d', 'close').iloc[0,0]
                # 获取历史收盘价
                h = attribute_history(security, g.ma_length, '1d', ['close'], skip_paused=True)['close']
                # 计算均线
                ma = mean(h)
                # 计算标准差
                sigma  = std(h)
                # 止损线
                low = current_price - g.loss_times_sigma * sigma
                # 止盈线
                high = current_price + g.profit_times_sigma * sigma
                # 在全局变量中记录卖出条件
                g.sell_conditions[security] = {'high': high, 'low': low, 'days': g.after_days-1}
